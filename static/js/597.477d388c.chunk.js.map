{"version":3,"file":"static/js/597.477d388c.chunk.js","mappings":"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","sources":["components/MainDashboard/ColumnForm.styled.js","components/MainDashboard/ColumnForm.jsx","components/MainDashboard/Column.styled.js","components/Card/CardList.styled.js","components/Card/Card.styled.js","components/AddTaskForm/AddTaskForm.styled.js","components/AddTaskForm/EditTaskForm.jsx","components/Card/Card.jsx","store/filter/selectors.js","components/Card/CardList.jsx","components/AddTaskForm/AddTaskForm.jsx","components/MainDashboard/Column.jsx","components/MainDashboard/ColunmList.styled.js","components/MainDashboard/ColunmList.jsx","components/MainDashboard/CreateBoard.styled.js","components/MainDashboard/CreateBoard.jsx","pages/MainDashboard/MainDashboard.styled.js","components/StatusFilterButton/StatusFilterButton.styled.js","components/StatusFilterButton/StatusFilterButton.jsx","components/StatusFilter/StatusFilter.styled.js","components/StatusFilter/StatusFilter.jsx","components/DashboardHeader/DashboardHeader.styled.js","components/DashboardHeader/DashboardHeader.jsx","pages/MainDashboard/MainDashboard.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const FormTitle = styled.p`\n  margin-bottom: 24px;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.36px;\n  color: #fff;\n  /* color: #161616; */\n`;\n\nexport const FormContainer = styled.div`\n  position: relative;\n  max-width: 335px;\n  padding: 24px;\n  border-radius: 8px;\n  background: #151515;\n  border: 1px solid rgba(190, 219, 176, 0.5);\n  /* background: #fcfcfc; */\n  @media (min-width: 768px) {\n    min-width: 350px;\n  }\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 14px 18px;\n  width: 100%;\n  height: 49px;\n  font-size: 14px;\n  font-weight: 400;\n  color: #fff;\n  /* color: #161616; */\n  line-height: normal;\n  letter-spacing: -0.28px;\n  background: #1f1f1f;\n  border-radius: 8px;\n  border: 1px solid #bedbb0;\n  opacity: 0.4;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  &:hover,\n  &:focus,\n  &:active {\n    opacity: 1;\n    outline: none;\n  }\n\n  transition: background 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  top: 14px;\n  right: 14px;\n  width: 18px;\n  height: 18px;\n`;\n\nexport const AddButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  height: 49px;\n  padding: 10px 0px 11px 0px;\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: #161616;\n  border-radius: 8px;\n  background: #bedbb0;\n  transition: background 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover,\n  &:focus {\n    background: #9dc888;\n  }\n`;\n\nexport const FormIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  /* background: #fff; */\n  background: #000;\n  border-radius: 6px;\n`;\n\nexport const FormIcon = styled.svg`\n  width: 14px;\n  height: 14px;\n  /* fill: #121212; */\n  fill: #fff;\n`;\n\nexport const FormCloseIcon = styled.svg`\n  width: 18px;\n  height: 18px;\n  /* fill: #121212; */\n  fill: #fff;\n`;\n\nexport const ValidationError = styled.p`\n  margin-top: 6px;\n  color: #ed4337;\n  font-size: 12px;\n`;\n\nexport const TitleContainer = styled.div`\n  margin-bottom: 24px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { addColumn, editColumn } from '../../store/columns/operations';\nimport sprite from '../../img/icons/sprite.svg';\nimport * as Yup from 'yup';\n\nimport {\n  FormTitle,\n  FormContainer,\n  CloseButton,\n  AddButton,\n  FormInput,\n  FormIconContainer,\n  FormIcon,\n  FormCloseIcon,\n  ValidationError,\n  TitleContainer,\n} from './ColumnForm.styled';\n\nconst ColumnFormSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(2, 'Please write more than 2 symbol!')\n    .max(32, 'Please write less than 32 symbols!')\n    .required('Required'),\n});\n\nexport const ColumnForm = ({\n  id,\n  boardId,\n  isEditMode,\n  onCloseForm,\n  columnTitle = '',\n}) => {\n  const dispatch = useDispatch();\n  const title = isEditMode ? 'Edit column' : 'Add column';\n  const buttonText = isEditMode ? 'Edit' : 'Add';\n\n  const handleSubmit = ({ title }, { resetForm }) => {\n    if (isEditMode) {\n      dispatch(editColumn({ boardId, id, title }));\n    } else {\n      dispatch(addColumn({ boardId, title }));\n    }\n    resetForm();\n    onCloseForm();\n  };\n\n  return (\n    <FormContainer>\n      <CloseButton type=\"button\" onClick={onCloseForm}>\n        <FormCloseIcon>\n          <use href={`${sprite}#icon-x-close`}></use>\n        </FormCloseIcon>\n      </CloseButton>\n      <FormTitle>{title}</FormTitle>\n      <Formik\n        initialValues={{\n          title: columnTitle,\n        }}\n        validationSchema={ColumnFormSchema}\n        onSubmit={(values, actions) => handleSubmit(values, actions)}\n      >\n        {({ errors, touched }) => (\n          <Form>\n            <TitleContainer>\n              <FormInput id=\"title\" name=\"title\" placeholder=\"Title\" />\n              {errors.title && touched.title ? (\n                <ValidationError>{errors.title}</ValidationError>\n              ) : null}\n            </TitleContainer>\n            <AddButton type=\"submit\">\n              <FormIconContainer>\n                <FormIcon>\n                  <use href={`${sprite}#icon-plus`}></use>\n                </FormIcon>\n              </FormIconContainer>\n              <div>{buttonText}</div>\n            </AddButton>\n          </Form>\n        )}\n      </Formik>\n    </FormContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ColumnContainer = styled.div`\n  max-width: 335px;\n`;\n\nexport const ColumnTitleContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 14px;\n  padding: 18px 20px 17px 20px;\n  height: 56px;\n  border-radius: 8px;\n  background-color: ${props => props.theme.colors.card};\n`;\n\nexport const ColumnTitle = styled.h3`\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: ${props => props.theme.colors.titleColor};\n`;\n\nexport const IconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 40px;\n  height: 16px;\n`;\n\nexport const TitleIcon = styled.svg`\n  width: 16px;\n  height: 16px;\n  fill: ${props => props.theme.colors.iconFill};\n  transition: fill ${props => props.theme.baseTransition};\n  &:hover,\n  &:focus {\n    fill: ${props => props.theme.colors.iconHover};\n  }\n`;\n\nexport const IconButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const AddCardButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  width: 100%;\n  height: 49px;\n  padding: 10px 0px 11px 0px;\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  border-radius: 8px;\n  color: ${props => props.theme.colors.addButtonColor};\n  background: ${props => props.theme.colors.addButtonBackground};\n  transition: background ${props => props.theme.baseTransition};\n  &:hover,\n  &:focus {\n    background: ${props => props.theme.colors.addButtonHoverBackground};\n  }\n`;\n\nexport const AddCardIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  background: ${props => props.theme.colors.buttonIconBackground};\n  border-radius: 6px;\n`;\n\nexport const AddCardIcon = styled.svg`\n  width: 14px;\n  height: 14px;\n  fill: ${props => props.theme.colors.buttonIconFill};\n`;\n","import styled from '@emotion/styled';\n\nexport const CardListContainer = styled.div`\n  max-height: calc(100vh - 312px);\n  height: 100%;\n  min-width: 350px;\n  margin-bottom: 14px;\n  /* overflow-y: auto; */\n\n  @media (min-width: 768px) {\n    max-height: calc(100vh - 324px);\n  }\n\n  @media (min-width: 1440px) {\n    max-height: calc(100vh - 292px);\n  }\n`;\n\nexport const CardListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-width: 335px;\n`;\n","import styled from '@emotion/styled';\nimport { priority } from 'styles';\n\nexport const CardStyled = styled.li`\n  position: relative;\n  height: 154px;\n  width: 100%;\n  padding: 14px 24px;\n  border-radius: 8px;\n  background-color: ${props => props.theme.colors.card};\n  overflow: hidden;\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 4px;\n    height: 100%;\n    background-color: ${props => priority[props.color]};\n  }\n`;\n\nexport const CardTitleStyled = styled.h3`\n  margin-bottom: 8px;\n  font-size: 14px;\n  line-height: 1.5;\n  font-weight: 600;\n  color: ${props => props.theme.colors.cardMajorText};\n`;\n\nexport const CardDescriptionStyled = styled.p`\n  width: 290px;\n  height: 2rem;\n  margin-bottom: 34px;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: 1.3333;\n  color: ${props => props.theme.colors.cardMinorText};\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;\n\nexport const CardFooter = styled.div`\n  position: relative;\n  display: flex;\n  align-items: flex-end;\n  &::before {\n    content: '';\n    position: absolute;\n    top: -14px;\n    left: 0;\n    width: 100%;\n    height: 1px;\n    background-color: ${props => props.theme.colors.cardDecor};\n    z-index: 1;\n  }\n`;\n\nexport const CardParamsWrapper = styled.div`\n  display: flex;\n  gap: 14px;\n`;\n\nexport const CardParamsTitle = styled.p`\n  margin-bottom: 4px;\n  font-size: 8px;\n  line-height: 1.5;\n  color: ${props => props.theme.colors.cardMinorText};\n`;\n\nexport const PriorityStatus = styled.p`\n  position: relative;\n  margin-left: 16px;\n  text-transform: capitalize;\n  font-size: 10px;\n  line-height: 1.5;\n  color: ${props => props.theme.colors.cardMajorText};\n  &::before {\n    content: '';\n    position: absolute;\n    top: 1.5px;\n    left: -16px;\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    background-color: ${props => priority[props.color]};\n  }\n`;\n\nexport const DeadlineDate = styled.p`\n  font-size: 10px;\n  line-height: 1.5;\n  color: ${props => props.theme.colors.cardMajorText};\n`;\n\nexport const ToolsWrapper = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const ToolsButtonBell = styled.button`\n  position: relative;\n  width: 16px;\n  height: 16px;\n  margin-left: auto;\n  margin-right: 12px;\n  color: #888888;\n  &::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 30px;\n    height: 30px;\n    transform: translate(-50%, -50%);\n    background-image: radial-gradient(circle, #bedbb070 0%, #bedbb000 70%);\n  }\n`;\n\nexport const ToolsButton = styled.button`\n  width: 16px;\n  height: 16px;\n  color: #888888;\n`;\n","import styled from '@emotion/styled';\n\nexport const StyledDiv = styled.div`\n  width: 350px;\n  height: 522px;\n  background-color: #151515;\n  margin-top: 10px;\n  margin-left: 10px;\n  border-radius: 10px;\n`;\n\nexport const StyledBtnClose = styled.button`\n  width: 18px;\n  height: 18px;\n  margin-left: 212px;\n`;\n\nexport const StyledP = styled.p`\n  display: inline-block;\n  color: #ffffff;\n  font-size: 18px;\n  margin-bottom: 24px;\n  margin-top: 24px;\n  margin-left: 24px;\n`;\n\nexport const StyledInput = styled.input`\n  border-radius: 8px;\n  border: 1px solid #bedbb0;\n  opacity: 0.4;\n  background: #1f1f1f;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  margin-bottom: 10px;\n  margin-left: 20px;\n  padding: 14px 115px 14px 18px;\n  font-size: 14px;\n  border-radius: 4px;\n  color: #ffffff;\n`;\n\nexport const StyledTextArea = styled.textarea`\n  resize: none;\n  margin-left: 20px;\n  color: #ffffff;\n  display: flex;\n  padding: 14px 113px 122px 18px;\n  align-items: center;\n  flex-shrink: 0;\n  border-radius: 8px;\n  border: 1px solid #bedbb0;\n  opacity: 0.4;\n  background: #1f1f1f;\n  box-shadow: 0px 4px 16px 0px rgba(22, 22, 22, 0.08);\n  margin-bottom: 24px;\n`;\n\nexport const StyledTitelBtn = styled.label`\n  color: rgba(255, 255, 255, 50%);\n  font-size: 12px;\n  margin-left: 24px;\n`;\n\nexport const StyledButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 24px;\n  width: 302px;\n  padding: 10px 0px 11px 0px;\n  justify-content: center;\n  align-items: center;\n  border-radius: 8px;\n  background: #bedbb0;\n`;\n\nexport const Container = styled.div`\n  color: #bedbb0;\n  font-family: Poppins;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  color: #bedbb0;\n  margin-left: 24px;\n  justify-content: left;\n  align-items: center;\n  display: flex;\n`;\n\nexport const RadioGroup = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 15px;\n`;\n\nexport const RadioLabel = styled.label`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n  cursor: pointer;\n  margin-top: 10px;\n`;\n\nexport const RadioInput = styled.input`\n  margin-bottom: 14px;\n\n  &::before {\n    content: '';\n    display: inline-block;\n    border-radius: 50%;\n    width: ${({ checked }) => (checked ? '10px' : '14px')};\n    height: ${({ checked }) => (checked ? '10px' : '14px')};\n    border: ${({ checked, colors }) => (checked ? '1px' : '0px')} solid\n      ${({ colors }) => colors};\n    background-color: ${({ checked, color }) => (checked ? color : color)};\n    transition: width 0.2s ease, height 0.2s ease; /* Добавляем transition */\n  }\n  &:checked::before {\n    margin-bottom: 3.2px;\n    margin-left: 1.5px;\n    background-color: ${({ checked, color }) => (checked ? color : color)};\n  }\n`;\n\nexport const PlusIconContainer = styled.div`\n  width: 28px;\n  height: 28px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 8px;\n  background-color: #161616;\n  border-radius: 20%;\n`;\n\nexport const StyledTitleDeadline = styled.span`\n  color: rgba(255, 255, 255, 0.5);\n  font-family: Poppins;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: -0.24px;\n  margin-left: 24px;\n`;\n\nexport const StyledFormikTitleNotification = styled.div`\n  margin-left: 24px;\n  margin-bottom: 5px;\n  color: red;\n  font-size: 12px;\n`;\n\nexport const StyledFormikDescriptionNotification = styled.div`\n  margin-top: -15px;\n  margin-left: 24px;\n  color: red;\n  font-size: 12px;\n`;\n\nexport const StyledFormikColorNotification = styled.div`\n  margin-top: -5px;\n  margin-left: 24px;\n  color: red;\n  font-size: 12px;\n`;\n","import React, { useState, useRef } from 'react';\nimport { useFormik } from 'formik';\nimport styled from '@emotion/styled';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport * as Yup from 'yup';\nimport sprite from '../../img/icons/sprite.svg';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './AddTaskForm.css';\nimport { useDispatch } from 'react-redux';\nimport { editTask } from '../../store/columns/operations';\nimport {\n  StyledP,\n  StyledDiv,\n  StyledInput,\n  StyledTextArea,\n  StyledButton,\n  RadioGroup,\n  RadioInput,\n  RadioLabel,\n  StyledTitelBtn,\n  StyledTitleDeadline,\n  Container,\n  StyledFormikTitleNotification,\n  StyledFormikDescriptionNotification,\n  StyledBtnClose,\n  PlusIconContainer,\n  StyledFormikColorNotification,\n} from './AddTaskForm.styled';\n\nexport const colors = ['#8FA1D0', '#E09CB5', '#BEDBB0', '#808080'];\nconst priorities = [ 'low', 'medium','high' ,'without'];\n\nconst StyledCustomCalendar = styled(DatePicker)`\n  &.custom-datepicker {\n    .react-datepicker-wrapper & .react-datepicker__day--keyboard-selected,\n    .react-datepicker-wrapper & .react-datepicker__day--today,\n    .react-datepicker-wrapper & .react-datepicker__day--weekend {\n      background-color: red !important;\n      color: white !important;\n    }\n\n    .react-datepicker-wrapper & .react-datepicker__day--selected {\n      background-color: red;\n      color: white;\n    }\n  }\n`;\n\nexport const EditTask = ({\n  boardId,\n  columnId,\n  closeModal,\n  title,\n  description,\n  priority,\n  taskId,\n  deadline: initialDeadline, \n}) => {\n  const initialValues = {\n    title: title,\n    description: description,\n    priority: priority,\n  };\n\n   const [deadline, setDeadline] = useState(initialDeadline);\n\n  const dispatch = useDispatch();\n\n  const deadlinePickerRef = useRef(null);\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string()\n      .required('Title is required')\n      .min(1, 'Title must contain at least 3 characters')\n      .max(32, 'Title must not exceed 50 characters'),\n    description: Yup.string()\n      .required('Description is required')\n      .min(1, 'Description must contain at least 10 characters')\n      .max(500, 'Description must not exceed 500 characters'),\n    priority: Yup.string().required('Please select a color'),\n    deadline: Yup.date()\n      .required('Please select a deadline date')\n      .min(new Date(), 'Deadline cannot be earlier than today'),\n  });\n\n  const handleDeadlineClick = () => {\n    if (deadlinePickerRef.current) {\n      deadlinePickerRef.current.setOpen(true);\n    }\n  };\n\n  const CurrentDate = () => {\n    const formattedDate = moment(deadline).format('MMMM D');\n    return <div>Today, {formattedDate}</div>;\n  };\n\n  const handleSubmit = async (values, { resetForm }) => {\n    console.log(values);\n    try {\n      if (!values.deadline) {\n        alert(\"!!!!!!!!\");\n        return;\n      }\n\n      await dispatch(editTask({ ...values, boardId, columnId, taskId }));\n      resetForm();\n      closeModal();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n  });\n\n  const handleDateChange = date => {\n    console.log(date);\n    if (date && date < new Date()) {\n      alert('Deadline cannot be before today.');\n      return;\n    }\n    formik.setFieldValue('deadline', date);\n    setDeadline(date);\n  };\n\n  const formattedDeadline = formik.values.deadline\n    ? moment(formik.values.deadline).format('D MMMM YYYY')\n    : CurrentDate();\n  \nconst updateDeadline = deadline ? new Date(deadline) : null;\n  console.log(deadline)\n  console.log(updateDeadline);\n\n  return (\n    <StyledDiv>\n      <StyledP>Edit Card</StyledP>\n\n      <StyledBtnClose onClick={closeModal}>\n        <svg\n          className=\"icon\"\n          width=\"18\"\n          height=\"18\"\n          aria-hidden=\"true\"\n          role=\"presentation\"\n          fill=\"white\"\n        >\n          <use xlinkHref={`${sprite}#icon-x-close`} />\n        </svg>\n      </StyledBtnClose>\n      <form onSubmit={formik.handleSubmit}>\n        <StyledInput\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n        />\n        {formik.touched.title && formik.errors.title ? (\n          <StyledFormikTitleNotification>\n            {formik.errors.title}\n          </StyledFormikTitleNotification>\n        ) : null}\n        <StyledTextArea\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"Description\"\n          value={formik.values.description}\n          onChange={formik.handleChange}\n        />\n        {formik.touched.description && formik.errors.description ? (\n          <StyledFormikDescriptionNotification>\n            {formik.errors.description}\n          </StyledFormikDescriptionNotification>\n        ) : null}\n        <StyledTitelBtn>Label color</StyledTitelBtn>\n        <br />\n        <RadioGroup>\n          {priorities.map((priority, index) => (\n            <RadioLabel key={index}>\n              <RadioInput\n                type=\"radio\"\n                name=\"priority\"\n                color={colors[index]}\n                value={priority}\n                checked={formik.values.priority === priority}\n                onChange={formik.handleChange}\n              />\n            </RadioLabel>\n          ))}\n        </RadioGroup>\n        {formik.touched.priority && formik.errors.priority ? (\n          <StyledFormikColorNotification>\n            {formik.errors.priority}\n          </StyledFormikColorNotification>\n        ) : null}\n\n        <StyledTitleDeadline>\n          Deadline\n          <Container>\n            {formattedDeadline}\n            <svg\n              className=\"icon\"\n              width=\"14\"\n              height=\"14\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n              fill=\"#BEDBB0\"\n              onClick={handleDeadlineClick}\n              style={{\n                marginLeft: '5px',\n                cursor: 'pointer',\n              }}\n            >\n              <use xlinkHref={`${sprite}#icon-chevron-down`} />\n            </svg>\n          </Container>\n          <StyledCustomCalendar\n            className=\"custom-datepicker\"\n            ref={deadlinePickerRef}\n            name=\"deadline\"\n            selected={updateDeadline}\n            onChange={handleDateChange}\n            locale=\"en\"\n            dateFormat=\"d MMMM yyyy\"\n            customInput={<div></div>}\n          />\n        </StyledTitleDeadline>\n        <StyledButton type=\"submit\">\n          <PlusIconContainer>\n            <svg\n              className=\"icon\"\n              width=\"14\"\n              height=\"14\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n              fill=\"white\"\n            >\n              <use xlinkHref={`${sprite}#icon-plus`} />\n            </svg>\n          </PlusIconContainer>\n          Edit\n        </StyledButton>\n      </form>\n    </StyledDiv>\n  );\n};","import {\n  CardDescriptionStyled,\n  CardFooter,\n  CardParamsTitle,\n  CardParamsWrapper,\n  CardStyled,\n  CardTitleStyled,\n  DeadlineDate,\n  PriorityStatus,\n  ToolsButton,\n  ToolsButtonBell,\n  ToolsWrapper,\n} from './Card.styled';\nimport sprite from '../../img/icons/sprite.svg';\nimport { Svg } from 'components/SvgIcon/SvgIcon';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal } from 'components/Modal';\nimport { EditTask } from 'components/AddTaskForm/EditTaskForm';\nimport { deleteTask } from '../../store/columns/operations';\nimport moment from 'moment';\n\nexport const Card = ({\n  _id,\n  title,\n  description,\n  priority,\n  deadline,\n  boardId,\n  columnId,\n  taskData,\n}) => {\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const openEditModal = () => {\n    setIsEditModalOpen(true);\n  };\n\n  const closeEditModal = () => {\n    setIsEditModalOpen(false);\n  };\n\n  const handleDeleteTaskButtonClick = async () => {\n    await dispatch(deleteTask({ boardId, columnId, taskId: _id }));\n  };\n\n  const formattedDeadline = moment(deadline).format('DD/MM/YYYY');\n\n  return (\n    <CardStyled color={priority}>\n      <CardTitleStyled>{title}</CardTitleStyled>\n      <CardDescriptionStyled>{description}</CardDescriptionStyled>\n      <CardFooter>\n        <CardParamsWrapper>\n          <div>\n            <CardParamsTitle>Priority</CardParamsTitle>\n            <PriorityStatus color={priority}>{priority}</PriorityStatus>\n          </div>\n          <div>\n            <CardParamsTitle>Deadline</CardParamsTitle>\n            <DeadlineDate>{formattedDeadline}</DeadlineDate>\n          </div>\n        </CardParamsWrapper>\n        <ToolsButtonBell type=\"button\">\n          <Svg w={16} h={16} use={`${sprite}#icon-bell`} />\n        </ToolsButtonBell>\n        <ToolsWrapper>\n          <ToolsButton type=\"button\" onClick={openEditModal}>\n            <Svg w={16} h={16} use={`${sprite}#icon-pencil`} />\n          </ToolsButton>\n          {isEditModalOpen && (\n            <Modal onClose={closeEditModal}>\n              <EditTask\n                boardId={boardId}\n                columnId={columnId}\n                taskId={_id}\n                taskData={taskData}\n                title={title}\n                description={description}\n                deadline={deadline}\n                priority={priority}\n                closeModal={closeEditModal}\n              />\n            </Modal>\n          )}\n          <ToolsButton type=\"button\" onClick={handleDeleteTaskButtonClick}>\n            <Svg w={16} h={16} use={`${sprite}#icon-trash`} />\n          </ToolsButton>\n        </ToolsWrapper>\n      </CardFooter>\n    </CardStyled>\n  );\n};\n","export const selectStatusFilter = state => state.filters.status;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport { CardListContainer, CardListStyled } from './CardList.styled';\nimport { Card } from './Card';\nimport { selectStatusFilter } from 'store/filter/selectors';\n\nexport const CardList = ({ boardId, cards }) => {\n  const status = useSelector(selectStatusFilter);\n  const filteredCards = status.priority\n    ? cards.filter(card => card.priority === status.priority)\n    : cards;\n\n  return (\n    <CardListContainer>\n      <Scrollbars\n        hideTracksWhenNotNeeded={true}\n        renderTrackVertical={({ style, ...props }) => (\n          <div\n            {...props}\n            style={{\n              ...style,\n              backgroundColor: 'rgba(255, 255, 255, 0.10)',\n              right: '0',\n              bottom: '0',\n              top: '2px',\n              borderRadius: '12px',\n              width: '8px',\n            }}\n          />\n        )}\n        renderThumbVertical={({ style, ...props }) => (\n          <div\n            {...props}\n            style={{\n              ...style,\n              borderRadius: '12px',\n              backgroundColor: '#121212',\n            }}\n          />\n        )}\n      >\n        <CardListStyled>\n          {filteredCards.map(\n            ({ _id, title, description, priority, deadline, owner }) => {\n              return (\n                <Card\n                  key={_id}\n                  _id={_id}\n                  title={title}\n                  description={description}\n                  priority={priority}\n                  deadline={deadline}\n                  boardId={boardId}\n                  columnId={owner}\n                />\n              );\n            }\n          )}\n        </CardListStyled>\n      </Scrollbars>\n    </CardListContainer>\n  );\n};\n","import React, { useState, useRef } from 'react';\nimport { useFormik } from 'formik';\nimport styled from '@emotion/styled';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport * as Yup from 'yup';\nimport sprite from '../../img/icons/sprite.svg';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './AddTaskForm.css';\nimport { useDispatch } from 'react-redux';\nimport { addTask } from '../../store/columns/operations';\nimport {\n  StyledP,\n  StyledDiv,\n  StyledInput,\n  StyledTextArea,\n  StyledButton,\n  RadioGroup,\n  RadioInput,\n  RadioLabel,\n  StyledTitelBtn,\n  StyledTitleDeadline,\n  Container,\n  StyledFormikTitleNotification,\n  StyledFormikDescriptionNotification,\n  StyledBtnClose,\n  PlusIconContainer,\n  StyledFormikColorNotification,\n} from './AddTaskForm.styled';\n\nexport const colors = ['#8FA1D0', '#E09CB5', '#BEDBB0', '#808080'];\nconst priorities = ['low', 'medium', 'high', 'without'];\n\nconst StyledCustomCalendar = styled(DatePicker)`\n  &.custom-datepicker {\n    .react-datepicker-wrapper & .react-datepicker__day--keyboard-selected,\n    .react-datepicker-wrapper & .react-datepicker__day--today,\n    .react-datepicker-wrapper & .react-datepicker__day--weekend {\n      background-color: red !important;\n      color: white !important;\n    }\n\n    .react-datepicker-wrapper & .react-datepicker__day--selected {\n      background-color: red;\n      color: white;\n    }\n  }\n`;\n\nconst initialValues = {\n  title: '',\n  description: '',\n  priority: '',\n};\n\nexport const AddTasks = ({ boardId, columnId, closeModal, taskId }) => {\n  const [deadline, setDeadline] = useState('');\n\n  const dispatch = useDispatch();\n  const deadlinePickerRef = useRef(null);\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string()\n      .required('Title is required')\n      .min(1, 'Title must contain at least 3 characters')\n      .max(32, 'Title must not exceed 50 characters'),\n    description: Yup.string()\n      .required('Description is required')\n      .min(1, 'Description must contain at least 10 characters')\n      .max(500, 'Description must not exceed 500 characters'),\n    priority: Yup.string().required('Please select a color'),\n    deadline: Yup.date()\n      .nullable()\n      .required('Please select a deadline date')\n      .min(new Date(), 'Deadline cannot be earlier than today')\n      .test('future', 'Please select a future date', value => {\n        const currentDate = new Date();\n        return value && value > currentDate;\n      }),\n  });\n\n  const handleDeadlineClick = () => {\n    if (deadlinePickerRef.current) {\n      deadlinePickerRef.current.setOpen(true);\n    }\n  };\n\n  const CurrentDate = () => {\n    const formattedDate = moment().format('MMMM D');\n    return <div>Today, {formattedDate}</div>;\n  };\n\n  const formattedDeadline = deadline\n    ? moment(deadline).format('D MMMM YYYY')\n    : CurrentDate();\n\n  \n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      \n      setDeadline(values.deadline);\n      await dispatch(addTask({ ...values, boardId, columnId, taskId }));\n      resetForm();\n      setDeadline('');\n      closeModal();\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleDateChange = date => {\n    console.log(date);\n    if (date && date < new Date()) {\n      alert('Deadline cannot be before today.');\n      return;\n    }\n    formik.setFieldValue('deadline', date);\n    setDeadline(date);\n  };\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n  });\n\n  return (\n    <StyledDiv>\n      <StyledP>Add Card</StyledP>\n\n      <StyledBtnClose onClick={closeModal}>\n        <svg\n          className=\"icon\"\n          width=\"18\"\n          height=\"18\"\n          aria-hidden=\"true\"\n          role=\"presentation\"\n          fill=\"white\"\n        >\n          <use xlinkHref={`${sprite}#icon-x-close`} />\n        </svg>\n      </StyledBtnClose>\n      <form onSubmit={formik.handleSubmit}>\n        <StyledInput\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          value={formik.values.title}\n          onChange={formik.handleChange}\n        />\n        {formik.touched.title && formik.errors.title ? (\n          <StyledFormikTitleNotification>\n            {formik.errors.title}\n          </StyledFormikTitleNotification>\n        ) : null}\n        <StyledTextArea\n          type=\"text\"\n          name=\"description\"\n          placeholder=\"Description\"\n          value={formik.values.description}\n          onChange={formik.handleChange}\n        />\n        {formik.touched.description && formik.errors.description ? (\n          <StyledFormikDescriptionNotification>\n            {formik.errors.description}\n          </StyledFormikDescriptionNotification>\n        ) : null}\n        <StyledTitelBtn>Label color</StyledTitelBtn>\n        <br />\n        <RadioGroup>\n          {priorities.map((priority, index) => (\n            <RadioLabel key={index}>\n              <RadioInput\n                type=\"radio\"\n                name=\"priority\"\n                color={colors[index]}\n                value={priority}\n                checked={formik.values.priority === priority}\n                onChange={formik.handleChange}\n              />\n            </RadioLabel>\n          ))}\n        </RadioGroup>\n        {formik.touched.priority && formik.errors.priority ? (\n          <StyledFormikColorNotification>\n            {formik.errors.priority}\n          </StyledFormikColorNotification>\n        ) : null}\n\n        <StyledTitleDeadline>\n          Deadline\n          <Container>\n            {formattedDeadline}\n            <svg\n              className=\"icon\"\n              width=\"14\"\n              height=\"14\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n              fill=\"#BEDBB0\"\n              onClick={handleDeadlineClick}\n              style={{\n                marginLeft: '5px',\n                cursor: 'pointer',\n              }}\n            >\n              <use xlinkHref={`${sprite}#icon-chevron-down`} />\n            </svg>\n          </Container>\n          <StyledCustomCalendar\n            className=\"custom-datepicker\"\n            ref={deadlinePickerRef}\n            name=\"deadline\"\n            selected={formik.values.deadline}\n            onChange={handleDateChange}\n            locale=\"en\"\n            dateFormat=\"d MMMM yyyy\"\n            showTimeSelect={false}\n            customInput={<div></div>}\n          />\n        </StyledTitleDeadline>\n        <StyledButton type=\"submit\">\n          <PlusIconContainer>\n            <svg\n              className=\"icon\"\n              width=\"14\"\n              height=\"14\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n              fill=\"white\"\n            >\n              <use xlinkHref={`${sprite}#icon-plus`} />\n            </svg>\n          </PlusIconContainer>\n          Add\n        </StyledButton>\n      </form>\n    </StyledDiv>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { deleteColumn } from '../../store/columns/operations';\nimport sprite from '../../img/icons/sprite.svg';\nimport { useModal } from 'hooks/useModal';\nimport { Modal } from 'components/Modal';\nimport { ColumnForm } from '../../components/MainDashboard';\n\nimport {\n  ColumnContainer,\n  ColumnTitleContainer,\n  ColumnTitle,\n  IconContainer,\n  TitleIcon,\n  IconButton,\n  AddCardButton,\n  AddCardIconContainer,\n  AddCardIcon,\n} from './Column.styled';\nimport { CardList } from 'components/Card/CardList';\nimport { AddTasks } from 'components/AddTaskForm/AddTaskForm';\n\nexport const Column = ({ _id, title, createdAt, cards, owner }) => {\n  const [isEditCardMode, setIsEditCardMode] = useState(false);\n  const { isModalOpen, closeModal, openModal } = useModal();\n  const dispatch = useDispatch();\n  const hasCards = cards && cards.length > 0;\n\n  const handleDeleteButtonClick = async () => {\n    if (hasCards) {\n      Notify.warning(\n        'It is impossible to remove column when exists one or more cards.'\n      );\n      return;\n    }\n    await dispatch(deleteColumn({ boardId: owner, columnId: _id }));\n  };\n\n  const handleAddCardButtonClick = () => {\n    setIsEditCardMode(false);\n    openModal();\n  };\n\n  const handleEditCardButtonClick = () => {\n    setIsEditCardMode(true);\n    openModal();\n  };\n\n  return (\n    <ColumnContainer>\n      <ColumnTitleContainer>\n        <ColumnTitle>{title}</ColumnTitle>\n        <IconContainer>\n          <IconButton\n            type=\"button\"\n            onClick={() => handleEditCardButtonClick(openModal)}\n          >\n            <TitleIcon>\n              <use href={`${sprite}#icon-pencil`}></use>\n            </TitleIcon>\n          </IconButton>\n          <IconButton type=\"button\" onClick={handleDeleteButtonClick}>\n            <TitleIcon>\n              <use href={`${sprite}#icon-trash`}></use>\n            </TitleIcon>\n          </IconButton>\n        </IconContainer>\n      </ColumnTitleContainer>\n      {cards && <CardList boardId={owner} cards={cards} />}\n      <AddCardButton onClick={handleAddCardButtonClick}>\n        <AddCardIconContainer>\n          <AddCardIcon>\n            <use href={`${sprite}#icon-plus`}></use>\n          </AddCardIcon>\n        </AddCardIconContainer>\n        <div>Add another card</div>\n      </AddCardButton>\n      {isModalOpen && isEditCardMode && (\n        <Modal onClose={closeModal}>\n          <ColumnForm\n            id={_id}\n            boardId={owner}\n            onCloseForm={closeModal}\n            columnTitle={title}\n            isEditMode={true}\n          />\n        </Modal>\n      )}\n      {isModalOpen && !isEditCardMode && (\n        <Modal onClose={closeModal}>\n          <AddTasks boardId={owner} columnId={_id} closeModal={closeModal} />\n        </Modal>\n      )}\n    </ColumnContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ColumnListStyled = styled.ul`\n  display: flex;\n  gap: 34px;\n  margin-right: 34px;\n`;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Column } from '../MainDashboard/Column';\nimport { ColumnListStyled } from './ColunmList.styled';\nimport { selectColumns, selectIsLoading } from 'store/columns/selectors';\nimport { getColumns } from 'store/columns/operations';\nimport { Loader } from '../Loader/Loader';\n\nexport const ColumnList = ({ boardId }) => {\n  const dispatch = useDispatch();\n  const columns = useSelector(selectColumns);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    if (!boardId) {\n      return;\n    }\n    dispatch(getColumns(boardId));\n  }, [boardId, dispatch]);\n\n  if (isLoading) {\n    return <Loader fill={'#fff'} />;\n  }\n  if (columns.length > 0) {\n    return (\n      <ColumnListStyled>\n        {columns.map(({ _id, title, createdAt, owner, cards }) => {\n          return (\n            <Column\n              key={_id}\n              owner={owner}\n              _id={_id}\n              title={title}\n              createdAt={createdAt}\n              cards={cards}\n            />\n          );\n        })}\n      </ColumnListStyled>\n    );\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const CreateBoardContainer = styled.div`\n  margin: auto;\n  text-align: center;\n  color: rgba(255, 255, 255, 0.5);\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 400;\n  line-height: 1.2;\n  letter-spacing: -0.28px;\n\n  @media (min-width: 768px) {\n    max-width: 486px;\n  }\n`;\n\nexport const CreateBoardButton = styled.button`\n  color: #bedbb0;\n  font-family: Poppins;\n`;\n","import React from 'react';\nimport { Modal } from '../Modal/Modal';\nimport { useModal } from 'hooks/useModal';\nimport NewBoard from 'components/NewBoard/NewBoard';\n\nimport { CreateBoardContainer, CreateBoardButton } from './CreateBoard.styled';\n\nconst CreateBoard = () => {\n  const { isModalOpen, openModal, closeModal } = useModal();\n  return (\n    <>\n      <CreateBoardContainer>\n        Before starting your project, it is essential{' '}\n        <CreateBoardButton type=\"button\" onClick={openModal}>\n          to create a board\n        </CreateBoardButton>{' '}\n        to visualize and track all the necessary tasks and milestones. This\n        board serves as a powerful tool to organize the workflow and ensure\n        effective collaboration among team members.\n      </CreateBoardContainer>\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <NewBoard onClick={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default CreateBoard;\n","import styled from '@emotion/styled';\n\nexport const MainDashboardSection = styled.section`\n  position: relative;\n  background-color: ${props => props.theme.colors.mainDashboardBackground} \n  background-image: ${props =>\n    props.background !== 'default'\n      ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Mobile/${props.background}.jpg\")`\n      : 'none'};\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n  @media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: ${props =>\n      props.background !== 'default'\n        ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Mobile/${props.background}%402x.jpg\")`\n        : 'none'};\n  }\n\n  @media (min-width: 768px) {\n    background-image: ${props =>\n      props.background !== 'default'\n        ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Tablet/${props.background}.jpg\")`\n        : 'none'};\n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: ${props =>\n        props.background !== 'default'\n          ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Tablet/${props.background}%402x.jpg\")`\n          : 'none'};\n    }\n  }\n\n  @media (min-width: 1440px) {\n    background-image: ${props =>\n      props.background !== 'default'\n        ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Desktop/${props.background}.jpg\")`\n        : 'none'};\n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: ${props =>\n        props.background !== 'default'\n          ? `url(\"https://res.cloudinary.com/dt8h4kxqx/image/upload/v1691824162/TaskPro/Desktop/${props.background}.jpg\")`\n          : 'none'};\n    }\n  }\n`;\n\nexport const MainDashboardContainer = styled.div`\n  /* width: 375px; */\n\n  min-height: calc(100vh - 64px);\n  height: 100%;\n  padding: 74px 20px 24px 20px;\n  /* margin: 0 auto; */\n\n  overflow-x: auto;\n\n  @media (min-width: 768px) {\n    display: flex;\n    gap: 34px;\n    /* width: 768px; */\n    padding: 80px 32px 52px 32px;\n  }\n\n  @media (min-width: 1440px) {\n    padding: 48px 32px 16px 24px;\n    /* width: 1440px; */\n    /* padding: 48px 24px 0 284px; */\n  }\n`;\n\nexport const MainDashboardSectionTitle = styled.h2`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  border: 0;\n  padding: 0;\n\n  white-space: nowrap;\n  clip-path: inset(100%);\n  clip: rect(0 0 0 0);\n  overflow: hidden;\n`;\n\nexport const MainDashboardAddColumnButton = styled.button`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  min-width: 335px;\n  height: 56px;\n  padding: 14px 78px;\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  border-radius: 8px;\n  color: ${props => props.theme.colors.addColumnButtonColor}\n  background-color: ${props => props.theme.colors.addColumnButtonBackground};\n  transition: background ${props => props.theme.baseTransition};\n  &:hover,\n  &:focus {\n    background: ${props => props.theme.colors.addColumnButtonHoverBackground};\n  }\n`;\n\nexport const MainDashboardIconContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  background-color: ${props => props.theme.colors.iconContainerBackground};\n  border-radius: 6px;\n`;\n\nexport const MainDashboardIcon = styled.svg`\n  width: 14px;\n  height: 14px;\n  fill: ${props => props.theme.colors.addColumnIconFill};\n`;\n\nexport const FilterContainer = styled.div`\n  position: absolute;\n  width: 100%;\n`;\n\nexport const ContentHolder = styled.div`\n  width: 100%;\n`;\n\nexport const ContentWrapper = styled.div`\n  width: max-content;\n  height: 100%;\n  display: flex;\n`;\n","import styled from '@emotion/styled';\n\nimport { baseTransition } from 'styles';\n\nexport const FilterButton = styled.button`\n  position: relative;\n  font-family: Poppins;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: -0.24px;\n  padding-left: 22px;\n  color: ${props =>\n    props.selected\n      ? props.theme.colors.filterBtnColorSelected\n      : props.theme.colors.filterBtnColor};\n  transition: color ${baseTransition};\n\n  &:hover,\n  &:focus {\n    color: ${props => props.theme.colors.iconHover};\n  }\n\n  &:before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 0;\n    transform: translateY(-50%);\n    width: 14px;\n    height: 14px;\n    border-radius: 50%;\n    background-color: ${props =>\n      props.text === 'Without priority'\n        ? props.theme.colors.filterWithoutPriorityColor\n        : props.color};\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    transform: translateY(-50%);\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    border: ${props => props.theme.colors.filterDecorativeElement};\n    opacity: ${props => (props.selected ? '1' : ' 0')};\n  }\n`;\n","import PropTypes from 'prop-types';\n\nimport { FilterButton } from './StatusFilterButton.styled';\n\nconst StatusFilterButton = ({ selected, color, children, onClick }) => {\n  return (\n    <FilterButton\n      selected={selected}\n      type=\"button\"\n      onClick={onClick}\n      color={color}\n      text={children}\n    >\n      {children}\n    </FilterButton>\n  );\n};\n\nStatusFilterButton.propTypes = {\n  selected: PropTypes.bool.isRequired,\n  color: PropTypes.string.isRequired,\n  children: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default StatusFilterButton;\n","import styled from '@emotion/styled';\n\nimport { baseTransition } from 'styles';\n\nexport const StatusFilterContainer = styled.div`\n  position: relative;\n  width: 300px;\n  height: 234px;\n  border-radius: 8px;\n  background-color: ${props => props.theme.colors.filterContainerBackground};\n  padding: 24px;\n  box-shadow: ${props => props.theme.colors.filterContainerShadow};\n`;\n\nexport const StatusFilterMainText = styled.p`\n  color: ${props => props.theme.colors.titleColor};\n  font-family: Poppins;\n  font-size: 18px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.36px;\n  width: 100%;\n  padding-bottom: 14px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n  margin-bottom: 14px;\n`;\n\nexport const StatusFilterBox = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 14px;\n`;\n\nexport const StatusFilterLabel = styled.p`\n  color: ${props => props.theme.colors.titleColor};\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n`;\n\nexport const StatusFilterShowAll = styled.button`\n  cursor: pointer;\n  font-family: Poppins;\n  font-size: 12px;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: -0.24px;\n  text-decoration-line: underline;\n  color: ${props =>\n    props.selected\n      ? props.theme.colors.filterBtnColorSelected\n      : props.theme.colors.filterBtnColor};\n  transition: color ${baseTransition};\n\n  &:hover,\n  &:focus {\n    color: ${props => props.theme.colors.iconHover};\n  }\n`;\n\nexport const StatusFilterItem = styled.li`\n  &:not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const CloseButton = styled.button`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #fff;\n  top: 14px;\n  right: 14px;\n  cursor: pointer;\n  fill: ${props => props.theme.colors.closeModalBtn};\n  transition: fill ${baseTransition};\n\n  &:hover,\n  &:focus {\n    fill: ${props => props.theme.colors.closeModalBtnHover};\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { selectStatusFilter } from 'store/filter/selectors';\nimport { statusFilters } from 'store/filter/constants';\nimport { setStatusFilter } from 'store/filter/filterSlice';\nimport StatusFilterButton from 'components/StatusFilterButton';\nimport sprite from '../../img/icons/sprite.svg';\n\nimport {\n  StatusFilterContainer,\n  StatusFilterMainText,\n  StatusFilterLabel,\n  StatusFilterBox,\n  StatusFilterShowAll,\n  CloseButton,\n  StatusFilterItem,\n} from './StatusFilter.styled';\n\nconst options = [\n  {\n    text: 'Without priority',\n    color: 'rgba(255, 255, 255, 0.3)',\n  },\n  {\n    text: 'Low',\n    color: 'rgba(143, 161, 208, 1)',\n  },\n  {\n    text: 'Medium',\n    color: 'rgba(224, 156, 181, 1)',\n  },\n  {\n    text: 'High',\n    color: 'rgba(190, 219, 176, 1)',\n  },\n];\n\nconst StatusFilter = ({ onClose }) => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = filter => dispatch(setStatusFilter(filter));\n\n  const onChangeFilterClick = text => {\n    switch (text) {\n      case 'Without priority':\n        return handleFilterChange(statusFilters.none);\n      case 'Show all':\n        return handleFilterChange(statusFilters.all);\n      case 'Low':\n        return handleFilterChange(statusFilters.low);\n      case 'Medium':\n        return handleFilterChange(statusFilters.medium);\n      case 'High':\n        return handleFilterChange(statusFilters.high);\n      default:\n        return;\n    }\n  };\n\n  const path = '#icon-x-close';\n  const filter = useSelector(selectStatusFilter);\n\n  return (\n    <StatusFilterContainer>\n      <CloseButton onClick={() => onClose()}>\n        <svg width={18} height={18}>\n          <use href={`${sprite}${path}`}></use>\n        </svg>\n      </CloseButton>\n      <StatusFilterMainText>Filter</StatusFilterMainText>\n      <StatusFilterBox>\n        <StatusFilterLabel>Label color</StatusFilterLabel>\n\n        <StatusFilterShowAll\n          type=\"button\"\n          selected={!filter.priority}\n          onClick={() => onChangeFilterClick('Show all')}\n        >\n          Show all\n        </StatusFilterShowAll>\n      </StatusFilterBox>\n      <ul>\n        {options.map(({ text, color }, index) => (\n          <StatusFilterItem key={index}>\n            <StatusFilterButton\n              selected={filter.statusText === text}\n              onClick={() => onChangeFilterClick(text)}\n              color={color}\n            >\n              {text}\n            </StatusFilterButton>\n          </StatusFilterItem>\n        ))}\n      </ul>\n    </StatusFilterContainer>\n  );\n};\n\nStatusFilter.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default StatusFilter;\n","import styled from '@emotion/styled';\n\nimport { devices, baseTransition } from 'styles';\n\nexport const DashboardHeaderTitle = styled.h2`\n  position: absolute;\n  top: 14px;\n  left: 20px;\n  color: ${props => props.theme.colors.titleColor};\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n\n  @media ${devices.tablet} {\n    font-size: 18px;\n    letter-spacing: -0.36px;\n    top: 26px;\n    left: 32px;\n  }\n\n  @media ${devices.desktop} {\n    top: 10px;\n  }\n`;\n\nexport const DashboardHeaderFilter = styled.button`\n  position: absolute;\n  top: 14px;\n  right: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  color: ${props => props.theme.colors.filterColor};\n  transition: color ${baseTransition};\n\n  @media ${devices.tablet} {\n    top: 20px;\n    right: 32px;\n  }\n\n  @media ${devices.desktop} {\n    top: 14px;\n    right: 24px;\n  }\n\n  &:hover,\n  &:focus {\n    color: ${props => {\n      if (props.disabled) return;\n      return props.theme.colors.iconHover;\n    }};\n  }\n`;\n\nexport const DashboardHeaderText = styled.p`\n  font-family: Poppins;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: normal;\n  letter-spacing: -0.28px;\n  margin-left: 8px;\n`;\n","import { useModal } from 'hooks/useModal';\nimport PropTypes from 'prop-types';\n\nimport { Modal } from 'components/Modal/Modal';\nimport StatusFilter from 'components/StatusFilter';\nimport sprite from '../../img/icons/sprite.svg';\nimport { Svg } from 'components/SvgIcon/SvgIcon';\n\nimport {\n  DashboardHeaderFilter,\n  DashboardHeaderText,\n  DashboardHeaderTitle,\n} from './DashboardHeader.styled';\n\nconst DashboardHeader = ({ name, disabled }) => {\n  const { isModalOpen, closeModal, openModal } = useModal();\n  const iconName = '#icon-filter';\n  return (\n    <>\n      {name && <DashboardHeaderTitle>{name}</DashboardHeaderTitle>}\n\n      <DashboardHeaderFilter\n        type=\"button\"\n        onClick={openModal}\n        disabled={disabled}\n      >\n        <Svg w={16} h={16} use={`${sprite}${iconName}`} />\n        <DashboardHeaderText>Filters</DashboardHeaderText>\n      </DashboardHeaderFilter>\n\n      {isModalOpen && (\n        <Modal onClose={closeModal}>\n          <StatusFilter onClose={closeModal}></StatusFilter>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nDashboardHeader.propTypes = {\n  name: PropTypes.string,\n  disabled: PropTypes.bool.isRequired,\n};\n\nexport default DashboardHeader;\n","import { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useModal } from 'hooks/useModal';\nimport { Modal } from 'components/Modal';\nimport { ColumnForm } from '../../components/MainDashboard';\nimport { ColumnList } from '../../components/MainDashboard/ColunmList';\nimport CreateBoard from '../../components/MainDashboard/CreateBoard';\nimport sprite from '../../img/icons/sprite.svg';\nimport {\n  MainDashboardContainer,\n  MainDashboardSection,\n  MainDashboardSectionTitle,\n  MainDashboardAddColumnButton,\n  MainDashboardIconContainer,\n  MainDashboardIcon,\n  FilterContainer,\n  ContentHolder,\n  ContentWrapper,\n} from './MainDashboard.styled';\nimport DashboardHeader from 'components/DashboardHeader/DashboardHeader';\nimport { selectBoardsState } from 'store/boards/selectors';\nimport { selectColumns } from 'store/columns/selectors';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\n\nconst MainDashboard = () => {\n  const { boardName } = useParams();\n  const { isModalOpen, closeModal, openModal } = useModal();\n  const { boards } = useSelector(selectBoardsState);\n  const selectedBoard = boardName\n    ? boards.find(board => board.title === boardName.trim())\n    : null;\n\n  const columns = useSelector(selectColumns);\n  const hasCards = columns.some(column => column.cards.length > 0);\n\n  return (\n    <MainDashboardSection\n      background={selectedBoard?.background || 'default'}\n    >\n      <FilterContainer>\n        <DashboardHeader\n          name={selectedBoard?.title}\n          disabled={!hasCards}\n        />\n      </FilterContainer>\n      <MainDashboardContainer>\n        {boardName ? (\n          <>\n            <MainDashboardSectionTitle>\n              Columns with tasks\n            </MainDashboardSectionTitle>\n            <ContentHolder>\n              <Scrollbars\n                hideTracksWhenNotNeeded={true}\n                renderTrackHorizontal={({ style, ...props }) => (\n                  <div\n                    {...props}\n                    style={{\n                      ...style,\n                      width: '100%',\n                      height: '12px',\n                      borderRadius: '12px',\n                      bottom: 0,\n                      backgroundColor: '#161616',\n                    }}\n                  />\n                )}\n                renderThumbHorizontal={({ style, ...props }) => (\n                  <div\n                    {...props}\n                    style={{\n                      ...style,\n                      height: '12px',\n                      borderRadius: '12px',\n                      backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                    }}\n                  />\n                )}\n              >\n                <ContentWrapper>\n                  <ColumnList boardId={selectedBoard?._id} />\n                  <MainDashboardAddColumnButton\n                    type=\"button\"\n                    onClick={openModal}\n                  >\n                    <MainDashboardIconContainer>\n                      <MainDashboardIcon>\n                        <use href={`${sprite}#icon-plus`}></use>\n                      </MainDashboardIcon>\n                    </MainDashboardIconContainer>\n                    <div>Add another column</div>\n                  </MainDashboardAddColumnButton>\n                </ContentWrapper>\n              </Scrollbars>\n            </ContentHolder>\n            {isModalOpen && (\n              <Modal onClose={closeModal}>\n                <ColumnForm\n                  onCloseForm={closeModal}\n                  boardId={selectedBoard?._id}\n                />\n              </Modal>\n            )}\n          </>\n        ) : (\n          <CreateBoard />\n        )}\n      </MainDashboardContainer>\n    </MainDashboardSection>\n  );\n};\n\nexport default MainDashboard;\n"],"names":["FormTitle","styled","FormContainer","FormInput","Field","CloseButton","AddButton","FormIconContainer","FormIcon","FormCloseIcon","ValidationError","TitleContainer","ColumnFormSchema","Yup","shape","title","min","max","required","ColumnForm","id","boardId","isEditMode","onCloseForm","columnTitle","dispatch","useDispatch","buttonText","type","onClick","href","sprite","initialValues","validationSchema","onSubmit","values","actions","resetForm","editColumn","addColumn","handleSubmit","errors","touched","name","placeholder","ColumnContainer","ColumnTitleContainer","props","theme","colors","card","ColumnTitle","titleColor","IconContainer","TitleIcon","iconFill","baseTransition","iconHover","IconButton","AddCardButton","addButtonColor","addButtonBackground","addButtonHoverBackground","AddCardIconContainer","buttonIconBackground","AddCardIcon","buttonIconFill","CardListContainer","CardListStyled","CardStyled","priority","color","CardTitleStyled","cardMajorText","CardDescriptionStyled","cardMinorText","CardFooter","cardDecor","CardParamsWrapper","CardParamsTitle","PriorityStatus","DeadlineDate","ToolsWrapper","ToolsButtonBell","ToolsButton","StyledDiv","StyledBtnClose","StyledP","StyledInput","StyledTextArea","StyledTitelBtn","StyledButton","Container","RadioGroup","RadioLabel","RadioInput","checked","PlusIconContainer","StyledTitleDeadline","StyledFormikTitleNotification","StyledFormikDescriptionNotification","StyledFormikColorNotification","priorities","StyledCustomCalendar","DatePicker","EditTask","columnId","closeModal","description","taskId","initialDeadline","deadline","useState","setDeadline","deadlinePickerRef","useRef","Date","console","log","alert","editTask","error","formik","useFormik","formattedDeadline","moment","format","formattedDate","CurrentDate","updateDeadline","className","width","height","role","fill","xlinkHref","value","onChange","handleChange","map","index","current","setOpen","style","marginLeft","cursor","ref","selected","date","setFieldValue","locale","dateFormat","customInput","Card","_id","taskData","isEditModalOpen","setIsEditModalOpen","closeEditModal","handleDeleteTaskButtonClick","deleteTask","w","h","use","Modal","onClose","selectStatusFilter","state","filters","status","CardList","cards","useSelector","filteredCards","filter","hideTracksWhenNotNeeded","renderTrackVertical","backgroundColor","right","bottom","top","borderRadius","renderThumbVertical","owner","AddTasks","nullable","test","currentDate","addTask","showTimeSelect","Column","createdAt","isEditCardMode","setIsEditCardMode","useModal","isModalOpen","openModal","hasCards","length","handleDeleteButtonClick","Notify","deleteColumn","ColumnListStyled","ColumnList","columns","selectColumns","isLoading","selectIsLoading","useEffect","getColumns","Loader","CreateBoardContainer","CreateBoardButton","NewBoard","MainDashboardSection","mainDashboardBackground","background","MainDashboardContainer","MainDashboardSectionTitle","MainDashboardAddColumnButton","addColumnButtonColor","addColumnButtonBackground","addColumnButtonHoverBackground","MainDashboardIconContainer","iconContainerBackground","MainDashboardIcon","addColumnIconFill","FilterContainer","ContentHolder","ContentWrapper","FilterButton","filterBtnColorSelected","filterBtnColor","text","filterWithoutPriorityColor","filterDecorativeElement","children","StatusFilterContainer","filterContainerBackground","filterContainerShadow","StatusFilterMainText","StatusFilterBox","StatusFilterLabel","StatusFilterShowAll","StatusFilterItem","closeModalBtn","closeModalBtnHover","options","handleFilterChange","setStatusFilter","onChangeFilterClick","statusFilters","statusText","DashboardHeaderTitle","devices","DashboardHeaderFilter","filterColor","disabled","DashboardHeaderText","boardName","useParams","boards","selectBoardsState","selectedBoard","find","board","trim","some","column","renderTrackHorizontal","renderThumbHorizontal"],"sourceRoot":""}